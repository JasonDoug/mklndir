# .gitignore for mklndir - Directory Hardlinking Tool
# This file specifies intentionally untracked files that Git should ignore.
# See: https://git-scm.com/docs/gitignore

# =============================================================================
# Python specific patterns
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# =============================================================================
# Development environments and tools
# =============================================================================

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use PyCharm to create this file.
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
.idea/

# VSCode
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# =============================================================================
# Operating system and editor files
# =============================================================================

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# =============================================================================
# mklndir specific patterns
# =============================================================================

# Project specific patterns for mklndir
# Test directories and files created during development and testing
test_source/
test_target/
demo_source/
demo_target/
temp_test*/
example_test*/
backup_test*/
hardlink_test*/
*.tmp
*.temp

# Build artifacts
*.whl
*.tar.gz

# Local development files
.local/
local_config.py
dev_config.py

# Backup files
*.bak
*.backup
*~

# Log files
*.log
hardlink.log
test.log

# IDE and editor files
.project
.pydevproject
.settings/
*.swp
*.swo

# Man page installation test files (system locations)
/usr/local/share/man/man1/mklndir.1
/usr/share/man/man1/mklndir.1

# Documentation build directories
docs/build/
docs/_build/
site/

# Temporary files created during testing
/tmp/
tmp/
temp/

# =============================================================================
# Testing and quality assurance tools
# =============================================================================

# Coverage reports
htmlcov/
.coverage.*

# Virtual environments (additional patterns)
pipenv/
.pipenv/

# Local pip cache
.pip/

# pytest artifacts
.pytest_cache/

# tox environments
.tox/

# Mypy type checking
.mypy_cache/

# bandit security linting
.bandit

# Safety package vulnerability checking
.safety

# =============================================================================
# Development workflow tools
# =============================================================================

# Pre-commit hooks
.pre-commit-config.yaml

# =============================================================================
# mklndir development and testing artifacts
# =============================================================================

# Development and testing artifacts specific to mklndir
# Directories created during functional testing
test_data/
sample_data/
benchmark_data/

# Performance testing files
*.perf
perf_*.txt

# Debugging files
debug.txt
trace.log

# Package development
twine_upload.log
